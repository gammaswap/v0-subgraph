// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BorrowLiquidity extends ethereum.Event {
  get params(): BorrowLiquidity__Params {
    return new BorrowLiquidity__Params(this);
  }
}

export class BorrowLiquidity__Params {
  _event: BorrowLiquidity;

  constructor(event: BorrowLiquidity) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountsLen(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CreateLoan extends ethereum.Event {
  get params(): CreateLoan__Params {
    return new CreateLoan__Params(this);
  }
}

export class CreateLoan__Params {
  _event: CreateLoan;

  constructor(event: CreateLoan) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DecreaseCollateral extends ethereum.Event {
  get params(): DecreaseCollateral__Params {
    return new DecreaseCollateral__Params(this);
  }
}

export class DecreaseCollateral__Params {
  _event: DecreaseCollateral;

  constructor(event: DecreaseCollateral) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokensHeldLen(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DepositNoPull extends ethereum.Event {
  get params(): DepositNoPull__Params {
    return new DepositNoPull__Params(this);
  }
}

export class DepositNoPull__Params {
  _event: DepositNoPull;

  constructor(event: DepositNoPull) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DepositReserves extends ethereum.Event {
  get params(): DepositReserves__Params {
    return new DepositReserves__Params(this);
  }
}

export class DepositReserves__Params {
  _event: DepositReserves;

  constructor(event: DepositReserves) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reservesLen(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class IncreaseCollateral extends ethereum.Event {
  get params(): IncreaseCollateral__Params {
    return new IncreaseCollateral__Params(this);
  }
}

export class IncreaseCollateral__Params {
  _event: IncreaseCollateral;

  constructor(event: IncreaseCollateral) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokensHeldLen(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RebalanceCollateral extends ethereum.Event {
  get params(): RebalanceCollateral__Params {
    return new RebalanceCollateral__Params(this);
  }
}

export class RebalanceCollateral__Params {
  _event: RebalanceCollateral;

  constructor(event: RebalanceCollateral) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokensHeldLen(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RebalanceCollateralWithLiquidity extends ethereum.Event {
  get params(): RebalanceCollateralWithLiquidity__Params {
    return new RebalanceCollateralWithLiquidity__Params(this);
  }
}

export class RebalanceCollateralWithLiquidity__Params {
  _event: RebalanceCollateralWithLiquidity;

  constructor(event: RebalanceCollateralWithLiquidity) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokensHeldLen(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RepayLiquidity extends ethereum.Event {
  get params(): RepayLiquidity__Params {
    return new RepayLiquidity__Params(this);
  }
}

export class RepayLiquidity__Params {
  _event: RepayLiquidity;

  constructor(event: RepayLiquidity) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get liquidityPaid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lpTokensPaid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountsLen(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawNoPull extends ethereum.Event {
  get params(): WithdrawNoPull__Params {
    return new WithdrawNoPull__Params(this);
  }
}

export class WithdrawNoPull__Params {
  _event: WithdrawNoPull;

  constructor(event: WithdrawNoPull) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawReserves extends ethereum.Event {
  get params(): WithdrawReserves__Params {
    return new WithdrawReserves__Params(this);
  }
}

export class WithdrawReserves__Params {
  _event: WithdrawReserves;

  constructor(event: WithdrawReserves) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reservesLen(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PositionManager__borrowLiquidityInputParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get lpTokens(): BigInt {
    return this[3].toBigInt();
  }

  get to(): Address {
    return this[4].toAddress();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}

export class PositionManager__decreaseCollateralInputParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get amounts(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get to(): Address {
    return this[4].toAddress();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}

export class PositionManager__depositNoPullInputParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get lpTokens(): BigInt {
    return this[2].toBigInt();
  }

  get to(): Address {
    return this[3].toAddress();
  }

  get deadline(): BigInt {
    return this[4].toBigInt();
  }
}

export class PositionManager__depositReservesResult {
  value0: Array<BigInt>;
  value1: BigInt;

  constructor(value0: Array<BigInt>, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReserves(): Array<BigInt> {
    return this.value0;
  }

  getShares(): BigInt {
    return this.value1;
  }
}

export class PositionManager__depositReservesInputParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get amountsDesired(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get amountsMin(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get to(): Address {
    return this[3].toAddress();
  }

  get protocol(): i32 {
    return this[4].toI32();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}

export class PositionManager__increaseCollateralInputParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get amounts(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get to(): Address {
    return this[4].toAddress();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}

export class PositionManager__loanResult {
  value0: BigInt;
  value1: Address;
  value2: Array<BigInt>;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Array<BigInt>,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getPoolId(): Address {
    return this.value1;
  }

  getTokensHeld(): Array<BigInt> {
    return this.value2;
  }

  getLiquidity(): BigInt {
    return this.value3;
  }

  getRateIndex(): BigInt {
    return this.value4;
  }

  getBlockNum(): BigInt {
    return this.value5;
  }
}

export class PositionManager__rebalanceCollateralInputParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get deltas(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get liquidity(): BigInt {
    return this[4].toBigInt();
  }

  get to(): Address {
    return this[5].toAddress();
  }

  get deadline(): BigInt {
    return this[6].toBigInt();
  }
}

export class PositionManager__rebalanceCollateralWithLiquidityInputParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get deltas(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get liquidity(): BigInt {
    return this[4].toBigInt();
  }

  get to(): Address {
    return this[5].toAddress();
  }

  get deadline(): BigInt {
    return this[6].toBigInt();
  }
}

export class PositionManager__repayLiquidityResult {
  value0: BigInt;
  value1: BigInt;
  value2: Array<BigInt>;

  constructor(value0: BigInt, value1: BigInt, value2: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    return map;
  }

  getLiquidityPaid(): BigInt {
    return this.value0;
  }

  getLpTokensPaid(): BigInt {
    return this.value1;
  }

  getAmounts(): Array<BigInt> {
    return this.value2;
  }
}

export class PositionManager__repayLiquidityInputParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get liquidity(): BigInt {
    return this[3].toBigInt();
  }

  get to(): Address {
    return this[4].toAddress();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}

export class PositionManager__withdrawNoPullInputParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get lpTokens(): BigInt {
    return this[2].toBigInt();
  }

  get to(): Address {
    return this[3].toAddress();
  }

  get deadline(): BigInt {
    return this[4].toBigInt();
  }
}

export class PositionManager__withdrawReservesResult {
  value0: Array<BigInt>;
  value1: BigInt;

  constructor(value0: Array<BigInt>, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReserves(): Array<BigInt> {
    return this.value0;
  }

  getAssets(): BigInt {
    return this.value1;
  }
}

export class PositionManager__withdrawReservesInputParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get amountsMin(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get to(): Address {
    return this[4].toAddress();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}

export class PositionManager extends ethereum.SmartContract {
  static bind(address: Address): PositionManager {
    return new PositionManager("PositionManager", address);
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowLiquidity(
    params: PositionManager__borrowLiquidityInputParamsStruct
  ): Array<BigInt> {
    let result = super.call(
      "borrowLiquidity",
      "borrowLiquidity((address,uint24,uint256,uint256,address,uint256)):(uint256[])",
      [ethereum.Value.fromTuple(params)]
    );

    return result[0].toBigIntArray();
  }

  try_borrowLiquidity(
    params: PositionManager__borrowLiquidityInputParamsStruct
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "borrowLiquidity",
      "borrowLiquidity((address,uint24,uint256,uint256,address,uint256)):(uint256[])",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  createLoan(
    cfmm: Address,
    protocol: i32,
    to: Address,
    deadline: BigInt
  ): BigInt {
    let result = super.call(
      "createLoan",
      "createLoan(address,uint24,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cfmm),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(protocol)),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigInt();
  }

  try_createLoan(
    cfmm: Address,
    protocol: i32,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createLoan",
      "createLoan(address,uint24,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cfmm),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(protocol)),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decreaseCollateral(
    params: PositionManager__decreaseCollateralInputParamsStruct
  ): Array<BigInt> {
    let result = super.call(
      "decreaseCollateral",
      "decreaseCollateral((address,uint24,uint256,uint256[],address,uint256)):(uint256[])",
      [ethereum.Value.fromTuple(params)]
    );

    return result[0].toBigIntArray();
  }

  try_decreaseCollateral(
    params: PositionManager__decreaseCollateralInputParamsStruct
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "decreaseCollateral",
      "decreaseCollateral((address,uint24,uint256,uint256[],address,uint256)):(uint256[])",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  depositNoPull(
    params: PositionManager__depositNoPullInputParamsStruct
  ): BigInt {
    let result = super.call(
      "depositNoPull",
      "depositNoPull((address,uint24,uint256,address,uint256)):(uint256)",
      [ethereum.Value.fromTuple(params)]
    );

    return result[0].toBigInt();
  }

  try_depositNoPull(
    params: PositionManager__depositNoPullInputParamsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositNoPull",
      "depositNoPull((address,uint24,uint256,address,uint256)):(uint256)",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositReserves(
    params: PositionManager__depositReservesInputParamsStruct
  ): PositionManager__depositReservesResult {
    let result = super.call(
      "depositReserves",
      "depositReserves((address,uint256[],uint256[],address,uint24,uint256)):(uint256[],uint256)",
      [ethereum.Value.fromTuple(params)]
    );

    return new PositionManager__depositReservesResult(
      result[0].toBigIntArray(),
      result[1].toBigInt()
    );
  }

  try_depositReserves(
    params: PositionManager__depositReservesInputParamsStruct
  ): ethereum.CallResult<PositionManager__depositReservesResult> {
    let result = super.tryCall(
      "depositReserves",
      "depositReserves((address,uint256[],uint256[],address,uint24,uint256)):(uint256[],uint256)",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PositionManager__depositReservesResult(
        value[0].toBigIntArray(),
        value[1].toBigInt()
      )
    );
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseCollateral(
    params: PositionManager__increaseCollateralInputParamsStruct
  ): Array<BigInt> {
    let result = super.call(
      "increaseCollateral",
      "increaseCollateral((address,uint24,uint256,uint256[],address,uint256)):(uint256[])",
      [ethereum.Value.fromTuple(params)]
    );

    return result[0].toBigIntArray();
  }

  try_increaseCollateral(
    params: PositionManager__increaseCollateralInputParamsStruct
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "increaseCollateral",
      "increaseCollateral((address,uint24,uint256,uint256[],address,uint256)):(uint256[])",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  initCodeHash(): Bytes {
    let result = super.call("initCodeHash", "initCodeHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_initCodeHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("initCodeHash", "initCodeHash():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  loan(
    cfmm: Address,
    protocol: i32,
    tokenId: BigInt
  ): PositionManager__loanResult {
    let result = super.call(
      "loan",
      "loan(address,uint24,uint256):(uint256,address,uint256[],uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(cfmm),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(protocol)),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return new PositionManager__loanResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigIntArray(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_loan(
    cfmm: Address,
    protocol: i32,
    tokenId: BigInt
  ): ethereum.CallResult<PositionManager__loanResult> {
    let result = super.tryCall(
      "loan",
      "loan(address,uint24,uint256):(uint256,address,uint256[],uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(cfmm),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(protocol)),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PositionManager__loanResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigIntArray(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rebalanceCollateral(
    params: PositionManager__rebalanceCollateralInputParamsStruct
  ): Array<BigInt> {
    let result = super.call(
      "rebalanceCollateral",
      "rebalanceCollateral((address,uint24,uint256,int256[],uint256,address,uint256)):(uint256[])",
      [ethereum.Value.fromTuple(params)]
    );

    return result[0].toBigIntArray();
  }

  try_rebalanceCollateral(
    params: PositionManager__rebalanceCollateralInputParamsStruct
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "rebalanceCollateral",
      "rebalanceCollateral((address,uint24,uint256,int256[],uint256,address,uint256)):(uint256[])",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  rebalanceCollateralWithLiquidity(
    params: PositionManager__rebalanceCollateralWithLiquidityInputParamsStruct
  ): Array<BigInt> {
    let result = super.call(
      "rebalanceCollateralWithLiquidity",
      "rebalanceCollateralWithLiquidity((address,uint24,uint256,int256[],uint256,address,uint256)):(uint256[])",
      [ethereum.Value.fromTuple(params)]
    );

    return result[0].toBigIntArray();
  }

  try_rebalanceCollateralWithLiquidity(
    params: PositionManager__rebalanceCollateralWithLiquidityInputParamsStruct
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "rebalanceCollateralWithLiquidity",
      "rebalanceCollateralWithLiquidity((address,uint24,uint256,int256[],uint256,address,uint256)):(uint256[])",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  repayLiquidity(
    params: PositionManager__repayLiquidityInputParamsStruct
  ): PositionManager__repayLiquidityResult {
    let result = super.call(
      "repayLiquidity",
      "repayLiquidity((address,uint24,uint256,uint256,address,uint256)):(uint256,uint256,uint256[])",
      [ethereum.Value.fromTuple(params)]
    );

    return new PositionManager__repayLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigIntArray()
    );
  }

  try_repayLiquidity(
    params: PositionManager__repayLiquidityInputParamsStruct
  ): ethereum.CallResult<PositionManager__repayLiquidityResult> {
    let result = super.tryCall(
      "repayLiquidity",
      "repayLiquidity((address,uint24,uint256,uint256,address,uint256)):(uint256,uint256,uint256[])",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PositionManager__repayLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigIntArray()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  withdrawNoPull(
    params: PositionManager__withdrawNoPullInputParamsStruct
  ): BigInt {
    let result = super.call(
      "withdrawNoPull",
      "withdrawNoPull((address,uint24,uint256,address,uint256)):(uint256)",
      [ethereum.Value.fromTuple(params)]
    );

    return result[0].toBigInt();
  }

  try_withdrawNoPull(
    params: PositionManager__withdrawNoPullInputParamsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawNoPull",
      "withdrawNoPull((address,uint24,uint256,address,uint256)):(uint256)",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawReserves(
    params: PositionManager__withdrawReservesInputParamsStruct
  ): PositionManager__withdrawReservesResult {
    let result = super.call(
      "withdrawReserves",
      "withdrawReserves((address,uint24,uint256,uint256[],address,uint256)):(uint256[],uint256)",
      [ethereum.Value.fromTuple(params)]
    );

    return new PositionManager__withdrawReservesResult(
      result[0].toBigIntArray(),
      result[1].toBigInt()
    );
  }

  try_withdrawReserves(
    params: PositionManager__withdrawReservesInputParamsStruct
  ): ethereum.CallResult<PositionManager__withdrawReservesResult> {
    let result = super.tryCall(
      "withdrawReserves",
      "withdrawReserves((address,uint24,uint256,uint256[],address,uint256)):(uint256[],uint256)",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PositionManager__withdrawReservesResult(
        value[0].toBigIntArray(),
        value[1].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _WETH(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _initCodeHash(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BorrowLiquidityCall extends ethereum.Call {
  get inputs(): BorrowLiquidityCall__Inputs {
    return new BorrowLiquidityCall__Inputs(this);
  }

  get outputs(): BorrowLiquidityCall__Outputs {
    return new BorrowLiquidityCall__Outputs(this);
  }
}

export class BorrowLiquidityCall__Inputs {
  _call: BorrowLiquidityCall;

  constructor(call: BorrowLiquidityCall) {
    this._call = call;
  }

  get params(): BorrowLiquidityCallParamsStruct {
    return changetype<BorrowLiquidityCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class BorrowLiquidityCall__Outputs {
  _call: BorrowLiquidityCall;

  constructor(call: BorrowLiquidityCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class BorrowLiquidityCallParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get lpTokens(): BigInt {
    return this[3].toBigInt();
  }

  get to(): Address {
    return this[4].toAddress();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}

export class ClearTokenCall extends ethereum.Call {
  get inputs(): ClearTokenCall__Inputs {
    return new ClearTokenCall__Inputs(this);
  }

  get outputs(): ClearTokenCall__Outputs {
    return new ClearTokenCall__Outputs(this);
  }
}

export class ClearTokenCall__Inputs {
  _call: ClearTokenCall;

  constructor(call: ClearTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minAmt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ClearTokenCall__Outputs {
  _call: ClearTokenCall;

  constructor(call: ClearTokenCall) {
    this._call = call;
  }
}

export class CreateLoanCall extends ethereum.Call {
  get inputs(): CreateLoanCall__Inputs {
    return new CreateLoanCall__Inputs(this);
  }

  get outputs(): CreateLoanCall__Outputs {
    return new CreateLoanCall__Outputs(this);
  }
}

export class CreateLoanCall__Inputs {
  _call: CreateLoanCall;

  constructor(call: CreateLoanCall) {
    this._call = call;
  }

  get cfmm(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get protocol(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateLoanCall__Outputs {
  _call: CreateLoanCall;

  constructor(call: CreateLoanCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecreaseCollateralCall extends ethereum.Call {
  get inputs(): DecreaseCollateralCall__Inputs {
    return new DecreaseCollateralCall__Inputs(this);
  }

  get outputs(): DecreaseCollateralCall__Outputs {
    return new DecreaseCollateralCall__Outputs(this);
  }
}

export class DecreaseCollateralCall__Inputs {
  _call: DecreaseCollateralCall;

  constructor(call: DecreaseCollateralCall) {
    this._call = call;
  }

  get params(): DecreaseCollateralCallParamsStruct {
    return changetype<DecreaseCollateralCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DecreaseCollateralCall__Outputs {
  _call: DecreaseCollateralCall;

  constructor(call: DecreaseCollateralCall) {
    this._call = call;
  }

  get tokensHeld(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class DecreaseCollateralCallParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get amounts(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get to(): Address {
    return this[4].toAddress();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}

export class DepositNoPullCall extends ethereum.Call {
  get inputs(): DepositNoPullCall__Inputs {
    return new DepositNoPullCall__Inputs(this);
  }

  get outputs(): DepositNoPullCall__Outputs {
    return new DepositNoPullCall__Outputs(this);
  }
}

export class DepositNoPullCall__Inputs {
  _call: DepositNoPullCall;

  constructor(call: DepositNoPullCall) {
    this._call = call;
  }

  get params(): DepositNoPullCallParamsStruct {
    return changetype<DepositNoPullCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DepositNoPullCall__Outputs {
  _call: DepositNoPullCall;

  constructor(call: DepositNoPullCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositNoPullCallParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get lpTokens(): BigInt {
    return this[2].toBigInt();
  }

  get to(): Address {
    return this[3].toAddress();
  }

  get deadline(): BigInt {
    return this[4].toBigInt();
  }
}

export class DepositReservesCall extends ethereum.Call {
  get inputs(): DepositReservesCall__Inputs {
    return new DepositReservesCall__Inputs(this);
  }

  get outputs(): DepositReservesCall__Outputs {
    return new DepositReservesCall__Outputs(this);
  }
}

export class DepositReservesCall__Inputs {
  _call: DepositReservesCall;

  constructor(call: DepositReservesCall) {
    this._call = call;
  }

  get params(): DepositReservesCallParamsStruct {
    return changetype<DepositReservesCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DepositReservesCall__Outputs {
  _call: DepositReservesCall;

  constructor(call: DepositReservesCall) {
    this._call = call;
  }

  get reserves(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get shares(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DepositReservesCallParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get amountsDesired(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get amountsMin(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get to(): Address {
    return this[3].toAddress();
  }

  get protocol(): i32 {
    return this[4].toI32();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}

export class IncreaseCollateralCall extends ethereum.Call {
  get inputs(): IncreaseCollateralCall__Inputs {
    return new IncreaseCollateralCall__Inputs(this);
  }

  get outputs(): IncreaseCollateralCall__Outputs {
    return new IncreaseCollateralCall__Outputs(this);
  }
}

export class IncreaseCollateralCall__Inputs {
  _call: IncreaseCollateralCall;

  constructor(call: IncreaseCollateralCall) {
    this._call = call;
  }

  get params(): IncreaseCollateralCallParamsStruct {
    return changetype<IncreaseCollateralCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class IncreaseCollateralCall__Outputs {
  _call: IncreaseCollateralCall;

  constructor(call: IncreaseCollateralCall) {
    this._call = call;
  }

  get tokensHeld(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class IncreaseCollateralCallParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get amounts(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get to(): Address {
    return this[4].toAddress();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}

export class RebalanceCollateralCall extends ethereum.Call {
  get inputs(): RebalanceCollateralCall__Inputs {
    return new RebalanceCollateralCall__Inputs(this);
  }

  get outputs(): RebalanceCollateralCall__Outputs {
    return new RebalanceCollateralCall__Outputs(this);
  }
}

export class RebalanceCollateralCall__Inputs {
  _call: RebalanceCollateralCall;

  constructor(call: RebalanceCollateralCall) {
    this._call = call;
  }

  get params(): RebalanceCollateralCallParamsStruct {
    return changetype<RebalanceCollateralCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class RebalanceCollateralCall__Outputs {
  _call: RebalanceCollateralCall;

  constructor(call: RebalanceCollateralCall) {
    this._call = call;
  }

  get tokensHeld(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class RebalanceCollateralCallParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get deltas(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get liquidity(): BigInt {
    return this[4].toBigInt();
  }

  get to(): Address {
    return this[5].toAddress();
  }

  get deadline(): BigInt {
    return this[6].toBigInt();
  }
}

export class RebalanceCollateralWithLiquidityCall extends ethereum.Call {
  get inputs(): RebalanceCollateralWithLiquidityCall__Inputs {
    return new RebalanceCollateralWithLiquidityCall__Inputs(this);
  }

  get outputs(): RebalanceCollateralWithLiquidityCall__Outputs {
    return new RebalanceCollateralWithLiquidityCall__Outputs(this);
  }
}

export class RebalanceCollateralWithLiquidityCall__Inputs {
  _call: RebalanceCollateralWithLiquidityCall;

  constructor(call: RebalanceCollateralWithLiquidityCall) {
    this._call = call;
  }

  get params(): RebalanceCollateralWithLiquidityCallParamsStruct {
    return changetype<RebalanceCollateralWithLiquidityCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class RebalanceCollateralWithLiquidityCall__Outputs {
  _call: RebalanceCollateralWithLiquidityCall;

  constructor(call: RebalanceCollateralWithLiquidityCall) {
    this._call = call;
  }

  get tokensHeld(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class RebalanceCollateralWithLiquidityCallParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get deltas(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get liquidity(): BigInt {
    return this[4].toBigInt();
  }

  get to(): Address {
    return this[5].toAddress();
  }

  get deadline(): BigInt {
    return this[6].toBigInt();
  }
}

export class RefundETHCall extends ethereum.Call {
  get inputs(): RefundETHCall__Inputs {
    return new RefundETHCall__Inputs(this);
  }

  get outputs(): RefundETHCall__Outputs {
    return new RefundETHCall__Outputs(this);
  }
}

export class RefundETHCall__Inputs {
  _call: RefundETHCall;

  constructor(call: RefundETHCall) {
    this._call = call;
  }
}

export class RefundETHCall__Outputs {
  _call: RefundETHCall;

  constructor(call: RefundETHCall) {
    this._call = call;
  }
}

export class RepayLiquidityCall extends ethereum.Call {
  get inputs(): RepayLiquidityCall__Inputs {
    return new RepayLiquidityCall__Inputs(this);
  }

  get outputs(): RepayLiquidityCall__Outputs {
    return new RepayLiquidityCall__Outputs(this);
  }
}

export class RepayLiquidityCall__Inputs {
  _call: RepayLiquidityCall;

  constructor(call: RepayLiquidityCall) {
    this._call = call;
  }

  get params(): RepayLiquidityCallParamsStruct {
    return changetype<RepayLiquidityCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class RepayLiquidityCall__Outputs {
  _call: RepayLiquidityCall;

  constructor(call: RepayLiquidityCall) {
    this._call = call;
  }

  get liquidityPaid(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get lpTokensPaid(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[2].value.toBigIntArray();
  }
}

export class RepayLiquidityCallParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get liquidity(): BigInt {
    return this[3].toBigInt();
  }

  get to(): Address {
    return this[4].toAddress();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SendTokensCallbackCall extends ethereum.Call {
  get inputs(): SendTokensCallbackCall__Inputs {
    return new SendTokensCallbackCall__Inputs(this);
  }

  get outputs(): SendTokensCallbackCall__Outputs {
    return new SendTokensCallbackCall__Outputs(this);
  }
}

export class SendTokensCallbackCall__Inputs {
  _call: SendTokensCallbackCall;

  constructor(call: SendTokensCallbackCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get payee(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SendTokensCallbackCall__Outputs {
  _call: SendTokensCallbackCall;

  constructor(call: SendTokensCallbackCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UnwrapWETHCall extends ethereum.Call {
  get inputs(): UnwrapWETHCall__Inputs {
    return new UnwrapWETHCall__Inputs(this);
  }

  get outputs(): UnwrapWETHCall__Outputs {
    return new UnwrapWETHCall__Outputs(this);
  }
}

export class UnwrapWETHCall__Inputs {
  _call: UnwrapWETHCall;

  constructor(call: UnwrapWETHCall) {
    this._call = call;
  }

  get minAmt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UnwrapWETHCall__Outputs {
  _call: UnwrapWETHCall;

  constructor(call: UnwrapWETHCall) {
    this._call = call;
  }
}

export class WithdrawNoPullCall extends ethereum.Call {
  get inputs(): WithdrawNoPullCall__Inputs {
    return new WithdrawNoPullCall__Inputs(this);
  }

  get outputs(): WithdrawNoPullCall__Outputs {
    return new WithdrawNoPullCall__Outputs(this);
  }
}

export class WithdrawNoPullCall__Inputs {
  _call: WithdrawNoPullCall;

  constructor(call: WithdrawNoPullCall) {
    this._call = call;
  }

  get params(): WithdrawNoPullCallParamsStruct {
    return changetype<WithdrawNoPullCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class WithdrawNoPullCall__Outputs {
  _call: WithdrawNoPullCall;

  constructor(call: WithdrawNoPullCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawNoPullCallParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get lpTokens(): BigInt {
    return this[2].toBigInt();
  }

  get to(): Address {
    return this[3].toAddress();
  }

  get deadline(): BigInt {
    return this[4].toBigInt();
  }
}

export class WithdrawReservesCall extends ethereum.Call {
  get inputs(): WithdrawReservesCall__Inputs {
    return new WithdrawReservesCall__Inputs(this);
  }

  get outputs(): WithdrawReservesCall__Outputs {
    return new WithdrawReservesCall__Outputs(this);
  }
}

export class WithdrawReservesCall__Inputs {
  _call: WithdrawReservesCall;

  constructor(call: WithdrawReservesCall) {
    this._call = call;
  }

  get params(): WithdrawReservesCallParamsStruct {
    return changetype<WithdrawReservesCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class WithdrawReservesCall__Outputs {
  _call: WithdrawReservesCall;

  constructor(call: WithdrawReservesCall) {
    this._call = call;
  }

  get reserves(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get assets(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class WithdrawReservesCallParamsStruct extends ethereum.Tuple {
  get cfmm(): Address {
    return this[0].toAddress();
  }

  get protocol(): i32 {
    return this[1].toI32();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get amountsMin(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get to(): Address {
    return this[4].toAddress();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}
