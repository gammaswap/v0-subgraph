type Loan @entity {
  id: ID!
  pool: Bytes! # address
  tokenId: BigInt!
}

type RebalanceCollateral @entity {
  id: ID!
  pool: Bytes! # address
  tokenId: BigInt!
  tokensHeldLen: BigInt!
}

type DepositNoPull @entity {
  id: ID!
  pool: Bytes! # address
  shares: BigInt!
}

type WithdrawNoPull @entity {
  id: ID!
  pool: Bytes! # address
  assets: BigInt!
}

type DepositReserves @entity {
  id: ID!
  pool: Bytes! # address
  reservesLen: BigInt!
  shares: BigInt!
}

type WithdrawReserves @entity {
  id: ID!
  pool: Bytes! # address
  reservesLen: BigInt!
  assets: BigInt!
}

type BorrowLiquidity @entity {
  id: ID!
  pool: Bytes! # address
  tokenId: BigInt!
  amountsLen: BigInt!
}

type RepayLiquidity @entity {
  id: ID!
  pool: Bytes! # address
  tokenId: BigInt!
  liquidityPaid: BigInt!
  lpTokensPaid: BigInt!
  amountsLen: BigInt!
}

type IncreaseCollateral @entity {
  id: ID!
  pool: Bytes! # address
  tokenId: BigInt!
  tokensHeldLen: BigInt!
}

type DecreaseCollateral @entity {
  id: ID!
  pool: Bytes! # address
  tokenId: BigInt!
  tokensHeldLen: BigInt!
}

type RebalanceCollateralWithLiquidity @entity {
  id: ID!
  pool: Bytes! # address
  tokenId: BigInt!
  tokensHeldLen: BigInt!
}

type PoolCreated @entity {
  id: ID!
  pool: Bytes! # address
  cfmm: Bytes! # address
  protocolId: BigInt!
  protocol: Bytes! # address
  count: BigInt!
}

type Approval @entity {
  id: ID!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt!
}

type Deposit @entity {
  id: ID!
  caller: Bytes! # address
  from: Bytes! # address
  assets: BigInt!
  shares: BigInt!
}

type Transfer @entity {
  id: ID!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt!
}

type Withdraw @entity {
  id: ID!
  caller: Bytes! # address
  to: Bytes! # address
  from: Bytes! # address
  assets: BigInt!
  shares: BigInt!
}
