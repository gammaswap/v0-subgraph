type User @entity {
  id: ID!
  address: Bytes!
  depositedPools: [Bytes!]!
  loans: [BigInt!]!
}


# pool events
type Pool @entity {
  id: ID!
  address: Bytes!
  cfmm: Bytes!
  protocolId: BigInt!
  tokenBalances: [BigInt!]!
  #protocol: Bytes!
  count: BigInt!
  blockNumber: BigInt!
  oldAccFeeIndex: BigInt!
  newAccFeeIndex: BigInt!
  lastFeeIndex: BigDecimal!
  suppliedLiquidity: BigInt!
  borrowedLiquidity: BigInt!
  totalCollateral: BigInt!
  loans: [Loan!]!@derivedFrom(field: "pool")
  loanSnapshots: [LoanData!]!@derivedFrom(field: "pool")
}

type PoolData @entity {
  id: ID!
  address: Bytes! # address
  lpTokenBalance: BigInt!
  lpTokenBorrowed: BigInt!
  lpTokenBorrowedPlusInterest: BigInt!
  lpTokenTotal: BigInt!
  lpInvariant: BigInt!
  lpBorrowedInvariant: BigInt!
  lpTotalInvariant: BigInt!
  lpUtilizationRate: BigDecimal!
  suppliedLiquidity: BigInt!
  borrowedLiquidity: BigInt!
  #borrowRate: BigDecimal!
  lastBlockNumber: BigInt!
  blockNumber: BigInt!
  price: BigInt!
  totalCollateral: BigInt!
}

type Loan @entity {
  id: ID!
  pool: Pool!
  tokenId: BigInt!
  #poolId: Bytes!
  tokensHeld: [BigInt!]!
  #heldLiquidity: BigInt!
  liquidity: BigInt!
  lpTokens: BigInt!
  rateIndex: BigInt! # accFeeIndex
  collateral: BigInt!
  loanToValue: BigDecimal!
  blockNumber: BigInt!
}

type LoanData @entity {
  id: ID!
  pool: Pool!
  #poolAddress: Bytes!
  tokenId: BigInt!
  #poolId: Bytes!
  tokensHeld: [BigInt!]!
  #heldLiquidity: BigInt!
  liquidity: BigInt!
  lpTokens: BigInt!
  rateIndex: BigInt! # accFeeIndex
  collateral: BigInt!
  loanToValue: BigDecimal!
  blockNumber: BigInt!
}

type GammaSwapOverview @entity {
  id: ID!
  #createdLoans: [Bytes!]!
  createdPools: [Bytes!]!
  totalSupplied: BigInt!
  totalBorrowed: BigInt!
  totalCollateral: BigInt!
}
