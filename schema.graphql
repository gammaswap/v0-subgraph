type GSFactory @entity {
  id: ID! # factory address
  totalVolumeUSD: BigDecimal!
  totalVolumeETH: BigDecimal!
  totalLiquidityUSD: BigDecimal!
  totalLiquidityETH: BigDecimal!
  totalSuppliedUSD: BigDecimal!
  totalSuppliedETH: BigDecimal!
  totalBorrowedUSD: BigDecimal!
  totalBorrowedETH: BigDecimal!
  totalCollateralUSD: BigDecimal! # not sure if we need this
  totalCollateralETH: BigDecimal! # not sure if we need this
  txCount: Int!
  poolCount: Int!
}

# pool events
type Pool @entity {
  id: ID!
  address: Bytes! # pool addr
  name: String
  symbol: String
  cfmm: Bytes! # native pool
  implementation: Bytes!
  implementationID: Int! # protocol ID for now
  tokens: [String!]!
  lpTokenBalance: BigInt!
  lpTokenBorrowed: BigInt!
  lpTokenBorrowedPlusInterest: BigInt!
  accFeeIndex: BigInt!
  lpInvariant: BigInt!
  borrowedInvariant: BigInt!
  createdAtTimestamp: BigInt!
  createdAtBlock: BigInt!
  txCount: Int!
  deposits: [Deposit!]! @derivedFrom(field: "pool")
}

type PoolSnapshot @entity {
  id: ID!
  address: Bytes! # address
  lpTokenBalance: BigInt!
  lpTokenBorrowed: BigInt!
  lpTokenBorrowedPlusInterest: BigInt!
  lpTokenTotal: BigInt!
  lpInvariant: BigInt!
  borrowedInvariant: BigInt!
  lpTotalInvariant: BigInt!
  lpUtilizationRate: BigDecimal!
  suppliedLiquidity: BigInt!
  borrowedLiquidity: BigInt!
  lastBlockNumber: BigInt!
  blockNumber: BigInt!
  price: BigInt!
  totalCollateral: BigInt!
}

type LiquidityPosition @entity {
  id: ID!
  user: User!
  pool: Pool!
  closed: Boolean!
  history: [LiquidityPositionSnapshot!]! @derivedFrom (field: "position")
}

type LiquidityPositionSnapshot @entity {
  id: ID!
  user: User!
  pool: Pool!
  position: LiquidityPosition!
  transaction: Transaction!
  block: Int!
  timestamp: Int!
}

type Loan @entity {
  id: ID!
  pool: Pool! # address of pool corresponds to id of Pool entity
  tokenId: BigInt!
  tokensHeld: [BigInt!]!
  liquidity: BigInt!
  lpTokens: BigInt!
  rateIndex: BigInt! # accFeeIndex
  collateral: BigInt!
  loanToValue: BigDecimal!
  blockNumber: BigInt!
}

type LoanSnapshot @entity {
  id: ID!
  pool: Pool! # address of pool corresponds to id of Pool entity
  tokenId: BigInt!
  tokensHeld: [BigInt!]!
  liquidity: BigInt!
  lpTokens: BigInt!
  rateIndex: BigInt! # accFeeIndex
  collateral: BigInt!
  loanToValue: BigDecimal!
  blockNumber: BigInt!
}

type Token @entity {
  id: ID! # address of token
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigInt!
  totalLiquidity: BigDecimal!
  tradeVolume: BigDecimal!
  lastPriceUSD: BigDecimal
  timestamp: BigInt!
  block: BigInt!
  txCount: Int! # transactions for all pools
}

type Deposit @entity {
  id: ID!
  user: User!
  pool: Pool!
  assets: BigInt!
  shares: BigInt!  
  block: BigInt!
  timestamp: BigInt!
}

type User @entity {
  id: ID! # user address
  positions: [LiquidityPosition!]! @derivedFrom(field: "user")
  loans: [BigInt!]
}

type Transaction @entity {
  id: ID! # {user}{transactionHash}{logIndex}
  txhash: Bytes!
  pool: Pool!
  poolSnapshot: PoolSnapshot!
  from: User!
  to: User
  type: TransactionType!
  block: BigInt!
  timestamp: BigInt!
}

enum PoolType {
  UNISWAPV2
  BALANCER_5050
  BALANCER_8020
  SUSHISWAP
}

enum TransactionType {
  DEPOSIT_LIQUIDITY
  WITHDRAW_LIQUIDITY
  DEPOSIT_RESERVES
  WITHDRAW_RESERVES
  INCREASE_COLLATERAL
  DECREASE_COLLATERAL
  REBALANCE_COLLATERAL
  BORROW_LIQUIDITY
  REPAY_LIQUIDITY
  LIQUIDATE
  LIQUIDATE_WITH_LP
  BATCH_LIQUIDATION
}
